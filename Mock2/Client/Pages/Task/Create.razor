@page "/mtasks/create/"
@using Mock2.Shared.Domain;
@using Mock2.Client.Static
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create new Task</h3>
<hr />
<br />
<EditForm Model="@newTask" OnValidSubmit="CreateTask">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Task Name: </label>
        <div>
            <InputText @bind-Value="newTask.TaskName" class="form-control">
                <InputText value="">-- select task name --</InputText>
            </InputText>
            <ValidationMessage For="@(() => newTask.TaskName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Is Completed: </label>
        <div>
            <InputCheckbox @bind-Value="newTask.IsCompleted" />
            <ValidationMessage For="@(() => newTask.IsCompleted)" />
        </div>
    </div>

    <div class="form-group">
        <label>Due Date: </label>
        <div>
            <InputDate @bind-Value="newTask.DueDate" />
            <ValidationMessage For="@(() => newTask.DueDate)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Task
    </button>
</EditForm>

@code {
    private Mtask newTask = new Mtask();

    private async Task CreateTask()
    {
        try
        {
            await _client.PostAsJsonAsync(Endpoints.MtasksEndpoint, newTask);
            _navManager.NavigateTo("/mtasks/");
        }
        catch (Exception ex)
        {
            // Handle the exception, display an error message, or log the error
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
    }
}

